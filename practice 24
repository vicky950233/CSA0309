#include <stdio.h>

// Heap Sort
void heapify(int a[],int n,int i){int l=2*i+1,r=2*i+2,lar=i;
 if(l<n&&a[l]>a[lar])lar=l; if(r<n&&a[r]>a[lar])lar=r;
 if(lar!=i){int t=a[i];a[i]=a[lar];a[lar]=t;heapify(a,n,lar);}
}
void heapSort(int a[],int n){for(int i=n/2-1;i>=0;i--)heapify(a,n,i);for(int i=n-1;i>0;i--){int t=a[0];a[0]=a[i];a[i]=t;heapify(a,i,0);}}


void merge(int a[],int l,int m,int r){int i=l,j=m+1,k=0,b[50];
 while(i<=m&&j<=r)b[k++]=a[i]<a[j]?a[i++]:a[j++];while(i<=m)b[k++]=a[i++];while(j<=r)b[k++]=a[j++];
 for(i=l;i<=r;i++)a[i]=b[i-l];
}
void mergeSort(int a[],int l,int r){if(l<r){int m=(l+r)/2;mergeSort(a,l,m);mergeSort(a,m+1,r);merge(a,l,m,r);}}

void insertionSort(int a[],int n){for(int i=1;i<n;i++){int key=a[i],j=i-1;while(j>=0&&a[j]>key)a[j+1]=a[j--];a[j+1]=key;}}

int partition(int a[],int l,int h){int p=a[h],i=l-1;for(int j=l;j<h;j++)if(a[j]<p){i++;int t=a[i];a[i]=a[j];a[j]=t;}int t=a[i+1];a[i+1]=a[h];a[h]=t;return i+1;}
void quickSort(int a[],int l,int h){if(l<h){int pi=partition(a,l,h);quickSort(a,l,pi-1);quickSort(a,pi+1,h);}}

int main(){
    int a[]={5,3,8,4,2},n=5;
    quickSort(a,0,n-1);
    for(int i=0;i<n;i++)printf("%d ",a[i]);
}
